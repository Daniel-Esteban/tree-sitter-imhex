==================
Simple function definition
==================

fn myfunc() {

};

---
(source_file
  (function_definition
    name: (identifier)
    parameters: (parameters_definition)
    block: (block)
  )
)

==================
Function definition with args
==================

fn myfunc(u8 arg1) {};
fn myfunc(u8 arg1, auto arg2) {};

---
(source_file
  (function_definition
    name: (identifier)
    parameters: (parameters_definition
      parameter: (parameter_definition
        type: (primitive_type)
        name: (identifier))
    )
    block: (block)
  )
  (function_definition
    name: (identifier)
    parameters: (parameters_definition
      parameter: (parameter_definition
        type: (primitive_type)
        name: (identifier))
      parameter: (parameter_definition
        type: (primitive_type)
        name: (identifier))
    )
    block: (block)
  )
)

==================
Function definition with pack
==================

fn myfunc(u8 ... args) {};

---
(source_file
  (function_definition
    name: (identifier)
    parameters: (parameters_definition
      pack: (parameter_pack
        type: (primitive_type)
        name: (identifier))
    )
    block: (block)
  )
)

==================
Function definition with args and pack
==================

fn myfunc(u8 arg1, u8 arg2, u8 ... args) {};

---
(source_file
  (function_definition
    name: (identifier)
    parameters: (parameters_definition
      parameter: (parameter_definition
        type: (primitive_type)
        name: (identifier))
      parameter: (parameter_definition
        type: (primitive_type)
        name: (identifier))
      pack: (parameter_pack
        type: (primitive_type)
        name: (identifier))
    )
    block: (block)
  )
)

==================
Function call
==================

myfunc();
myfunc(arg1);
myfunc(arg1, arg2);

---
(source_file
  (function_call
    name: (identifier)
  )
  (function_call
    name: (identifier)
    parameters: (function_call_parameters
      parameter: (identifier))
  )
  (function_call
    name: (identifier)
    parameters: (function_call_parameters
      parameter: (identifier)
      parameter: (identifier))
  )
)

==================
Simple while loop
==================

while(true) {

}

---
(source_file
  (while_statement
    condition: (boolean_literal)
    body: (block))
)

==================
Complex while loop
==================

while(a < 50 && check()) {
    if (x == 36.5)
        break;
    else {
        a += 5;
        continue;
    }
}

---
(source_file
  (while_statement
    condition: (binary_numeric_operator
      left: (binary_numeric_operator
        left: (identifier)
        right: (number_literal))
      right: (function_call
        name: (identifier)))
    body: (block
      (if_statement
        condition: (binary_numeric_operator
          left: (identifier)
          right: (number_literal))
        body: (break_statement)
        else: (block
          (assignation_statement
            left: (identifier)
            right: (number_literal))
          (continue_statement))
      )
    )
  )
)

==================
Simple for loop
==================


for ( u8 i = 0 , i < 10 , i = i + 1) {

}

---
(source_file
  (for_statement
    initialization: (for_variable_init
      type: (primitive_type)
      name: (identifier)
      value: (number_literal))
    condition: (binary_numeric_operator
      left: (identifier)
      right: (number_literal))
    increment: (assignation_expression
      left: (identifier)
      right: (binary_numeric_operator
        left: (identifier)
        right: (number_literal)))
    body: (block))
)
