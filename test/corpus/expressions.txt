==================
Literals
==================

a = -1;
a =  2;
a = -150.0;
a = 150.0;
a = 150.0F;
a = 150.0D;
a = 0xFA05;
a = 0b100101;
a = 0o7620;
a = -0xFA05;
a = -0b100101;
a = -0o7620;
a = "This is a string";
a = "This is\na string";
a = "";
a = true;
a = false;
a = 'G';
a = '';
a = '\n';

---
(source_file
  (assignation_statement
    (identifier)
      (number_literal))
  (assignation_statement
    (identifier)
      (number_literal))
  (assignation_statement
    (identifier)
      (number_literal))
  (assignation_statement
    (identifier)
      (number_literal))
  (assignation_statement
    (identifier)
      (number_literal))
  (assignation_statement
    (identifier)
      (number_literal))
  (assignation_statement
    (identifier)
      (number_literal))
  (assignation_statement
    (identifier)
      (number_literal))
  (assignation_statement
    (identifier)
      (number_literal))
  (assignation_statement
    (identifier)
      (number_literal))
  (assignation_statement
    (identifier)
      (number_literal))
  (assignation_statement
    (identifier)
      (number_literal))
  (assignation_statement
    (identifier)
      (string_literal))
  (assignation_statement
    (identifier)
      (string_literal (escape_sequence)))
  (assignation_statement
    (identifier)
      (string_literal))
  (assignation_statement
    (identifier)
      (boolean_literal))
  (assignation_statement
    (identifier)
      (boolean_literal))
  (assignation_statement
    (identifier)
      (character_literal))
  (assignation_statement
    (identifier)
      (character_literal))
  (assignation_statement
    (identifier)
      (character_literal (escape_sequence)))
)

==================
Simple unary expressions
==================

a = ~1;
a = (a);
a = !1;

---
(source_file
  (assignation_statement
    (identifier)
    (unary_numeric_operator
      (number_literal)))
  (assignation_statement
    (identifier)
    (unary_numeric_operator
      (identifier)))
  (assignation_statement
    (identifier)
    (unary_numeric_operator
      (number_literal)))
)

==================
Simple binary expressions
==================

a = 1 + 3;
a = 1 - 3;
a = 1 * 3;
a = 1 / 3;
a = 1 % 3;
a = 1 >> 3;
a = 1 << 3;
a = 1 & 3;
a = 1 | 3;
a = 1 ^ 3;
a = 1 == 3;
a = 1 != 3;
a = 1 < 3;
a = 1 > 3;
a = 1 >= 3;
a = 1 <= 3;
a = 1 && 3;
a = 1 || 3;
a = 1 ^^ 3;

---
(source_file
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (number_literal)))
)

==================
Dollar operator
==================
$ = 5;

u8 addr @ $ + 0x10;
---
(source_file
  (assignation_statement
    (dollar)
    (number_literal))
  (variable_placement
    type: (primitive_type)
    name: (identifier)
    offset: (binary_numeric_operator
      left: (dollar)
      right: (number_literal))
  )
)

==================
Simple string operators
==================

a = "This is" + " a string";
a = "This is" * 5;
a = "This is" == "This is";
a = "This is" != "Another string";
a = "This is" < "Another string";
a = "This is" > "Another string";
a = "This is" >= "Another string";
a = "This is" <= "Another string";

---
(source_file
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (string_literal)
      right: (string_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (string_literal)
      right: (number_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (string_literal)
      right: (string_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (string_literal)
      right: (string_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (string_literal)
      right: (string_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (string_literal)
      right: (string_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (string_literal)
      right: (string_literal)))
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (string_literal)
      right: (string_literal)))
)

==================
Simple ternary operator
==================
a = 1? 2: 3;

---
(source_file
  (assignation_statement
    (identifier)
    (ternary_numeric_operator
      cond: (number_literal)
      iftrue: (number_literal)
      iffalse: (number_literal)))
)

==================
Nested binary expressions
==================
a = 1 + b * c;

---
(source_file
  (assignation_statement
    (identifier)
    (binary_numeric_operator
      left: (number_literal)
      right: (binary_numeric_operator
        left: (identifier)
        right: (identifier))
    ))
)

==================
Complex ternary operator
==================

a = (b % 2) == 0 ? a * b : b / 2 ;

---
(source_file
  (assignation_statement
    (identifier)
    (ternary_numeric_operator
      cond: (binary_numeric_operator
        left: (unary_numeric_operator
          (binary_numeric_operator
            left: (identifier)
            right: (number_literal)))
        right: (number_literal))
      iftrue: (binary_numeric_operator
        left: (identifier)
        right: (identifier))
      iffalse: (binary_numeric_operator
        left: (identifier)
        right: (number_literal))
    )
  )
)
